[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "file-classifier"
version = "0.1.0"
description = "AI-powered document classification and organization system"
readme = "README.md"
requires-python = ">=3.11"
authors = [{ name = "Chris" }]
license = { text = "MIT" }

# Runtime dependencies
dependencies = [
    # AI/LLM Core
    "openai>=1.62.0",
    "langchain>=0.3.27",
    "langchain-community>=0.3.27",
    "langchain-core>=0.3.79",
    "langchain-ollama>=0.3.10",
    "langchain-openai>=0.3.8",
    "langchain-text-splitters>=0.3.11",

    # Document Processing
    "pypdf>=6.1.3",
    "fpdf>=1.7.2",
    "python-magic>=0.4.27",

    # Data Validation
    "pydantic>=2.9.2",

    # HTTP & Networking
    "requests>=2.32.5",
    "httpx>=0.27.2",

    # Utilities
    "python-dotenv>=1.0.1",
    "tqdm>=4.66.5",
    "regex>=2024.9.11",
]

# Development dependencies
[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "pytest-json-report>=1.5.0",
    "pytest-benchmark>=4.0.0",
    "coverage>=7.6.4",

    # Code Quality
    "black>=25.9.0",
    "flake8>=7.0.0",
    "pylint>=3.3.4",
    "bandit>=1.7.5",
]

[project.urls]
Repository = "https://github.com/ckrough/file-classifier"

# Black - Code Formatting
[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.venv
  | \.pytest_cache
  | build
  | dist
  | __pycache__
)/
'''

# Pytest - Testing (Claude Code Optimized)
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--no-header",
    "-ra",
    "--color=no",
    "--disable-warnings",
    "--ignore=.venv",
]
console_output_style = "classic"
markers = [
    "functional: functional/integration tests",
    "unit: unit tests",
    "slow: tests that take >1s",
    "benchmark: performance benchmark tests",
]

# Coverage
[tool.coverage.run]
source = ["src", "."]
omit = ["*/tests/*", "*/.venv/*", "*/site-packages/*", "*/__pycache__/*"]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# Bandit - Security Scanning
[tool.bandit]
exclude_dirs = [".venv", "tests", "build", "dist", ".git", ".pytest_cache"]
skips = ["B101"]                                                            # Allow assert statements (used in tests)

# Pylint
[tool.pylint.main]
ignore = [".venv", "tests"]
max-line-length = 88

[tool.pylint.messages_control]
disable = [
    "C0111", # missing-docstring
    "R0903", # too-few-public-methods
]
